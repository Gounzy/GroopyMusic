<?php

namespace AppBundle\Repository;
use AppBundle\Command\FailedContractCommand;
use AppBundle\Command\KnownOutcomeContractCommand;
use AppBundle\Entity\Artist;

/**
 * ContractArtistRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContractArtistRepository extends \Doctrine\ORM\EntityRepository
{
    public function queryVisible2() {
        return $this->createQueryBuilder('c')
            ->join('c.artist', 'a')
            ->join('c.step', 's')
            ->join('c.preferences', 'p')
            ->leftJoin('c.reality', 'r')
            ->addSelect('a')
            ->addSelect('s')
            ->addSelect('r')
            ->addSelect('p')
            ->where('c.failed = 0')
            ->andWhere('(r.date is not null AND r.date > :now) OR (p.date > :now)')
            ->setParameter('now', new \DateTime('now'))
            ;
    }

    public function queryVisible() {
        return $this->createQueryBuilder('c')
            ->join('c.artist', 'a')
            ->join('c.step', 's')
            ->join('c.preferences', 'p')
            ->leftJoin('c.reality', 'r')
            ->addSelect('a')
            ->addSelect('s')
            ->addSelect('r')
            ->addSelect('p')
            ->where('c.failed = 0')
            ->andWhere('(r.date is not null AND r.date > :now) OR (p.date > :now)')
            ->setParameter('now', new \DateTime('now'))
        ;
    }

    public function findNewContracts($max) {
        return $this->queryVisible()
            ->orderBy('p.date', 'desc')
            ->setMaxResults($max)
            ->getQuery()
            ->getResult()
        ;
    }

    public function findSuccessful() {
        return $this->createQueryBuilder('c')
            ->leftJoin('c.contractsFan', 'cf')
            ->join('c.reality', 'r')
            ->addSelect('cf')
            ->addSelect('r')
            ->where('c.successful = 1')
            ->andWhere('r.date > :now')
            ->setParameter('now', new \DateTime('now'))
            ->getQuery()
            ->getResult()
        ;
    }

    /**
     * Returns 0-$limit contracts for which the deadline is not passed AND not enough money is raised at the moment
     */
    public function findNotSuccessfulYet($limit = null) {
        $qb = $this->queryVisible()
            ->andWhere('c.dateEnd > :now')
            ->andWhere('c.tickets_sold < s.min_tickets')
            ->andWhere('c.successful = 0')
            // TODO modify r.date --> concert date (new field)
            ->orderBy('p.date', 'asc')
        ;

        if($limit != null) {
            $qb->setMaxResults($limit);
        }

        return $qb
            ->getQuery()
            ->getResult()
        ;
    }

    /**
     * Returns 0-$limit contracts for which there are tickets to buy
     */
    public function findVisible($limit = null) {
        $qb = $this->queryVisible()
        ;

        if($limit != null) {
            $qb->setMaxResults($limit);
        }

        return $qb
            ->orderBy('p.date', 'asc')
            ->getQuery()
            ->getResult()
        ;
    }

    public function findCurrentForArtist(Artist $artist) {
        return $this->queryVisible()
            ->andWhere('a = :artist')
            ->setParameter('artist', $artist)
            ->getQuery()
            ->getOneOrNullResult()
        ;
    }

    /**
     * @see KnownOutcomeContractCommand
     */
    public function findPending() {
        return $this->queryVisible()
            ->andWhere('c.dateEnd < :now')
            ->andWhere('c.successful = 0')
            ->getQuery()
            ->getResult()
        ;
    }

    /**
     * @see KnownOutcomeContractCommand
     */
    public function findNewlySuccessful() {
        return $this->queryVisible()
            ->andWhere('c.successful = 0') // Not marked as successful yet
            ->andWhere('c.tickets_sold >= s.min_tickets')
            ->getQuery()
            ->getResult()
        ;
    }
}
